// Initialize jsPDF
const { jsPDF } = window.jspdf;

// DOM Elements
const editor = document.getElementById('editor');
const toolbarButtons = document.querySelectorAll('.toolbar button');
const textColorPicker = document.getElementById('text-color');
const highlightColorPicker = document.getElementById('highlight-color');
const convertBtn = document.getElementById('convert-btn');
const downloadBtn = document.getElementById('download-btn');
const clearBtn = document.getElementById('clear-btn');
const sampleBtn = document.getElementById('sample-btn');
const pdfPreview = document.getElementById('pdf-preview');
const pageSizeSelect = document.getElementById('page-size');
const orientationSelect = document.getElementById('orientation');
const marginInput = document.getElementById('margin');
const fontSizeSelect = document.getElementById('font-size');
const imageUploadInput = document.getElementById('image-upload');

// Sample Content
const sampleText = `
  <h1 style="text-align:center;">Sample PDF Document</h1>
  <p>This is a sample document for testing the Text to PDF converter.</p>
  <p><strong>Features:</strong></p>
  <ul>
    <li>Text formatting (Bold, Italic, Underline)</li>
    <li>Bullet & Numbered Lists</li>
    <li>Color and highlight</li>
    <li>Multiple page sizes and orientation</li>
  </ul>
  <p style="text-align:right;"><em>Generated by Text to PDF Converter</em></p>
`;

// Toolbar formatting
toolbarButtons.forEach(button => {
  button.addEventListener('click', () => {
    const command = button.getAttribute('data-command');
    if (command === 'createLink' || command === 'insertImage') {
      const url = prompt('Enter the URL:', 'https://');
      if (url) document.execCommand(command, false, url);
    } else {
      document.execCommand(command, false, null);
    }

    if (command.startsWith('justify')) {
      toolbarButtons.forEach(btn => {
        if (btn.getAttribute('data-command')?.startsWith('justify')) {
          btn.classList.remove('active');
        }
      });
      button.classList.add('active');
    }
  });
});

// Color pickers
textColorPicker.addEventListener('input', e => {
  document.execCommand('foreColor', false, e.target.value);
});

highlightColorPicker.addEventListener('input', e => {
  document.execCommand('hiliteColor', false, e.target.value);
});

// Clear editor
clearBtn.addEventListener('click', () => {
  editor.innerHTML = '<p><br></p>';
});

// Sample content
sampleBtn.addEventListener('click', () => {
  editor.innerHTML = sampleText;
});

// Image Upload
imageUploadInput.addEventListener('change', e => {
  const file = e.target.files[0];
  if (file && file.type.startsWith("image/")) {
    const reader = new FileReader();
    reader.onload = function (evt) {
      const img = document.createElement("img");
      img.src = evt.target.result;
      img.style.maxWidth = "100%";
      editor.appendChild(img);
    };
    reader.readAsDataURL(file);
  }
});

// Generate PDF
function generatePdf(download = true) {
  const pageSize = pageSizeSelect.value;
  const orientation = orientationSelect.value;
  const margin = parseInt(marginInput.value);
  const fontSize = parseInt(fontSizeSelect.value);

  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = editor.innerHTML;
  tempDiv.style.width = '100%';
  tempDiv.style.fontSize = `${fontSize}pt`;
  tempDiv.style.padding = `${margin}mm`;
  tempDiv.style.lineHeight = '1.5';
  tempDiv.style.fontFamily = 'Arial, sans-serif';
  tempDiv.style.background = 'white';

  document.body.appendChild(tempDiv);
  tempDiv.style.position = 'absolute';
  tempDiv.style.left = '-9999px';

  html2canvas(tempDiv).then(canvas => {
    document.body.removeChild(tempDiv);
    const imgData = canvas.toDataURL('image/png');

    const pdf = new jsPDF({
      orientation: orientation,
      unit: 'mm',
      format: pageSize,
    });

    const imgProps = pdf.getImageProperties(imgData);
    const pdfWidth = pdf.internal.pageSize.getWidth() - margin * 2;
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

    pdf.addImage(imgData, 'PNG', margin, margin, pdfWidth, pdfHeight);
    updatePdfPreview(imgData);

    if (download) {
      pdf.save('text-to-pdf.pdf');
    }
  });
}

convertBtn.addEventListener('click', () => generatePdf(true));
downloadBtn.addEventListener('click', () => generatePdf(true));

// Preview PDF as image
function updatePdfPreview(imgData) {
  pdfPreview.innerHTML = `
    <img src="${imgData}" class="w-full rounded shadow" />
    <p class="text-sm text-gray-500 mt-2 text-center">Preview of your PDF</p>
  `;
}

// Load sample on start
sampleBtn.click();
